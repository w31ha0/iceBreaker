{"version":3,"file":"4.c65e7529be6c0b0a9569.hot-update.js","sources":["webpack:///pages/mainGame.js"],"sourcesContent":["import axios from 'axios'\r\nimport React from \"react\";\r\nimport Pusher from 'pusher-js';\r\nimport Page from '../components/page';\r\nimport strings from '../constants/strings'\r\nimport Layout from '../components/Layout.js'\r\nimport endpoints from '../constants/endpoints'\r\nimport credentials from '../constants/credentials'\r\nimport LetterComponent from '../components/lettersComponent'\r\nimport ExchangeRequest from '../components/ExchangeRequest'\r\nimport ExchangeResponse from '../components/ExchangeResponse'\r\nimport WaitingForVerification from '../components/WaitingForVerification'\r\n\r\nexport default class extends Page {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            userName: \"\",\r\n            activeUsers : [\"Test\",\"Mary\"],\r\n            lettersAssigned: [],\r\n            userSelected: '',\r\n            isWaitingForCounterPartyToVerify: false,\r\n            isVerifyingForCounterParty: false,\r\n            letterToGive: ''\r\n        }\r\n        this.exchangeRequest = {}\r\n\r\n        this.retriveUserName()\r\n        this.retriveLetters()\r\n        this.retrieveActiveUsers()\r\n    }\r\n\r\n    async componentDidMount(){\r\n        this.pusher = new Pusher(credentials.PUSHER_APP_KEY, {\r\n            cluster: credentials.PUSHER_APP_CLUSTER,\r\n            encrypted: true\r\n        });\r\n\r\n        this.channel = this.pusher.subscribe(strings.PUSHER_CHANNEL);\r\n\r\n        this.channel.bind(strings.PUSHER_NEW_USER_EVENT, (user) => {\r\n            console.log(\"Received new user from Pusher: \"+user)\r\n            var newActiveUsers = this.state.activeUsers\r\n            newActiveUsers.push(user)\r\n            this.setState({\r\n                activeUsers: newActiveUsers\r\n            })\r\n        });\r\n\r\n        this.channel.bind(strings.PUSHER_NEW_EXCHANGE_REQUEST_EVENT, (exchangeRequest) => {\r\n            console.log(\"Received new exchange request: \"+JSON.stringify(exchangeRequest))\r\n            if(exchangeRequest.respond_user == this.state.userName){\r\n                console.log(\"Exchange request is for me.\")\r\n                this.exchangeRequest = exchangeRequest\r\n                this.setState({\r\n                    isVerifyingForCounterParty: true\r\n                })\r\n            }\r\n        });\r\n\r\n        this.channel.bind(strings.EXCHANGE_COMPLETED_EVENT, (data) => {\r\n            if(data.request_user == this.state.userName){\r\n                console.log(\"Exchange request has completed: \"+JSON.stringify(data))\r\n                this.setState({\r\n                    isWaitingForCounterPartyToVerify: false\r\n                })\r\n                this.swapLetters(this.state.letterToGive,data.letterToReceive)\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    swapLetters = (letterToGive,letterToReceive) => {\r\n        console.log(\"Giving away letter \"+letterToGive)\r\n        console.log(\"Receiving letter \"+letterToReceive)\r\n        var lettersAssigned = this.state.lettersAssigned\r\n        lettersAssigned[lettersAssigned.indexOf(letterToGive)] = letterToReceive\r\n        this.setState({\r\n            lettersAssigned: lettersAssigned\r\n        })\r\n    }\r\n\r\n    cancelWaitingForVerification = (r) => {\r\n        this.setState({\r\n            isWaitingForCounterPartyToVerify: false\r\n        })\r\n    }\r\n\r\n    onExchangeRequestSubmitSuccess = (letterToGive) => {\r\n        this.setState({\r\n            isWaitingForCounterPartyToVerify: true,\r\n            letterToGive: letterToGive\r\n        })\r\n    }\r\n\r\n    onExchangeResponseSubmitSuccess = (letterToGive,letterToReceive, requestUser) => {\r\n        this.swapLetters(letterToGive,letterToReceive)\r\n        this.setState({\r\n            isVerifyingForCounterParty: false\r\n        })\r\n    }\r\n\r\n    onClick = (e) => {\r\n        console.log(\"Setting user selected to \"+e.target.index)\r\n        this.setState({\r\n            userSelected: this.state.activeUsers[e.target.value]\r\n        })\r\n    }\r\n\r\n    retriveLetters = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: endpoints.API_GET_ASSIGNED_LETTERS\r\n        })\r\n        .then((response) => {\r\n            console.log('Got letters assigned as '+response.data)\r\n            this.setState({\r\n                lettersAssigned : response.data\r\n            })\r\n        })\r\n        .catch(function (response) {\r\n            //handle error\r\n            console.log(response);\r\n        });\r\n    }\r\n\r\n    retrieveActiveUsers = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: endpoints.API_GET_ALL_ACTIVE_USERS\r\n        })\r\n        .then((response) => {\r\n            const activeUsers = response.data.map(session => session.user.name)\r\n            console.log('Parsed active users as '+activeUsers)\r\n            this.setState({\r\n                activeUsers : activeUsers\r\n            })\r\n        })\r\n        .catch(function (response) {\r\n            //handle error\r\n            console.log(response);\r\n        });\r\n    }\r\n\r\n    retriveUserName = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: endpoints.API_GET_SESSION\r\n        })\r\n        .then((response) => {\r\n            if (typeof response.data.user === 'undefined')\r\n                return\r\n            console.log('Received username as  '+response.data.user.name)\r\n            this.setState({\r\n                userName : response.data.user.name\r\n            })\r\n        })\r\n        .catch(function (response) {\r\n            //handle error\r\n            console.log(response);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        console.log(\"passing in user name into props \"+this.state.userName)\r\n        if (this.state.isWaitingForCounterPartyToVerify)\r\n            return(\r\n                <Layout>\r\n                    <WaitingForVerification cancel={this.cancelWaitingForVerification}/>\r\n                </Layout>\r\n            )\r\n        else if(this.state.isVerifyingForCounterParty)\r\n            return(\r\n                <Layout>\r\n                    <div className=\"form-group\">\r\n                        <label>{this.exchangeRequest.request_user} has requested to connect.Please fill in his details below.</label>\r\n                    </div>\r\n                    <ExchangeResponse targetUser={this.exchangeRequest.request_user} userName={this.exchangeRequest.request_user} onExchangeResponseSubmitSuccess={this.onExchangeResponseSubmitSuccess} lettersAvailable={this.state.lettersAssigned} exchangeRequest={this.exchangeRequest}/>\r\n                </Layout>\r\n            )\r\n        else\r\n            return(\r\n                <Layout>\r\n                    <div id=\"wrapper\">\r\n                        <div id=\"sidebar-wrapper\">\r\n                            <nav id=\"spy\">\r\n                                <ul className=\"sidebar-nav nav\">\r\n                                    {this.state.activeUsers.map(({user},index) => {\r\n                                        return <li id={index} className=\"sidebar-brand\" onClick={this.onClick}>{user}</li>\r\n                                    })}\r\n                                </ul>\r\n                            </nav>\r\n                        </div>\r\n                        <div id=\"page-content-wrapper\">\r\n                            <div className=\"page-content inset\" data-spy=\"scroll\" data-target=\"#spy\">\r\n                                <LetterComponent lettersAssigned={this.state.lettersAssigned}/>\r\n                                <div style={{marginTop:'50px',marginBottom:'50px'}} className=\"form-group\">\r\n                                    <label>Fill in the details of the player you would like to exchange with.</label>\r\n                                </div>\r\n                                <ExchangeRequest targetUser={this.state.userSelected} userName={this.state.userName} onExchangeRequestSubmitSuccess={this.onExchangeRequestSubmitSuccess} userSelected={this.state.userSelected} lettersAvailable={this.state.lettersAssigned}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <style jsx>{`\r\n                      #wrapper {\r\n                      padding-left: 250px;\r\n                      transition: all 0.4s ease 0s;\r\n                    }\r\n\r\n                    #sidebar-wrapper {\r\n                      margin-left: -250px;\r\n                      left: 250px;\r\n                      width: 250px;\r\n                      background: #000;\r\n                      position: fixed;\r\n                      height: 100%;\r\n                      overflow-y: auto;\r\n                      z-index: 1000;\r\n                      transition: all 0.4s ease 0s;\r\n                      color: white;\r\n                    }\r\n\r\n                    #wrapper.active {\r\n                      padding-left: 0;\r\n                    }\r\n\r\n                    #wrapper.active #sidebar-wrapper {\r\n                      left: 0;\r\n                    }\r\n\r\n                    #page-content-wrapper {\r\n                      width: 100%;\r\n                    }\r\n\r\n                    .sidebar-nav {\r\n                      position: absolute;\r\n                      top: 0;\r\n                      width: 250px;\r\n                      list-style: none;\r\n                      margin: 0;\r\n                      padding: 0;\r\n                    }\r\n\r\n                    .sidebar-nav li {\r\n                      line-height: 40px;\r\n                      text-indent: 20px;\r\n                    }\r\n\r\n                    .sidebar-nav li a {\r\n                      color: #999999;\r\n                      display: block;\r\n                      text-decoration: none;\r\n                      padding-left: 60px;\r\n                    }\r\n\r\n                    .sidebar-nav li a span:before {\r\n                      position: absolute;\r\n                      left: 0;\r\n                      color: #41484c;\r\n                      text-align: center;\r\n                      width: 20px;\r\n                      line-height: 18px;\r\n                    }\r\n\r\n                    .sidebar-nav li a:hover,\r\n                    .sidebar-nav li.active {\r\n                      color: #fff;\r\n                      background: rgba(255,255,255,0.2);\r\n                      text-decoration: none;\r\n                    }\r\n\r\n                    .sidebar-nav li a:active,\r\n                    .sidebar-nav li a:focus {\r\n                      text-decoration: none;\r\n                    }\r\n\r\n                    .sidebar-nav > .sidebar-brand {\r\n                      height: 65px;\r\n                      line-height: 60px;\r\n                      font-size: 18px;\r\n                    }\r\n\r\n                    .sidebar-nav > .sidebar-brand a {\r\n                      color: #999999;\r\n                    }\r\n\r\n                    .sidebar-nav > .sidebar-brand a:hover {\r\n                      color: #fff;\r\n                      background: none;\r\n                    }\r\n\r\n                    .inset {\r\n                      padding: 20px;\r\n                    }\r\n\r\n                    @media (max-width:767px) {\r\n\r\n                    #wrapper {\r\n                      padding-left: 0;\r\n                    }\r\n\r\n                    #sidebar-wrapper {\r\n                      left: 0;\r\n                    }\r\n\r\n                    #wrapper.active {\r\n                      position: relative;\r\n                      left: 250px;\r\n                    }\r\n\r\n                    #wrapper.active #sidebar-wrapper {\r\n                      left: 250px;\r\n                      width: 250px;\r\n                      transition: all 0.4s ease 0s;\r\n                    }\r\n\r\n                    #menu-toggle {\r\n                      display: inline-block;\r\n                    }\r\n\r\n                    .inset {\r\n                      padding: 15px;\r\n                    }\r\n\r\n                    }\r\n                    `}</style>\r\n                </Layout>\r\n            )\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// pages/mainGame.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AA2DA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqEA;AACA;AADA;AAGA;AAxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2EA;AACA;AACA;AAFA;AAIA;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFA;AACA;AAAA;AACA;AADA;AAGA;AAtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyFA;AACA;AAAA;AACA;AADA;AAGA;AA7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgGA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AA9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiHA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAhIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmIA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAnJA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAhBA;AAgBA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;AA8FA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAkJA;;;;AA5TA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}